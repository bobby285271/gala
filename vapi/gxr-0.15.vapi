/* gxr-0.15.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Gxr", gir_namespace = "Gxr", gir_version = "0.15", lower_case_cprefix = "gxr_")]
namespace Gxr {
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_action_get_type ()")]
	public class Action : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Action ();
		public void emit_analog (Gxr.AnalogEvent event);
		public void emit_digital (Gxr.DigitalEvent event);
		public void emit_pose (Gxr.PoseEvent event);
		[CCode (has_construct_function = false)]
		public Action.from_type_url (Gxr.Context context, Gxr.ActionSet action_set, Gxr.ActionType type, string url);
		public unowned Gxr.ActionSet get_action_set ();
		public Gxr.ActionType get_action_type ();
		public unowned string get_url ();
		public virtual bool poll ();
		public void set_action_set (owned Gxr.ActionSet action_set);
		public void set_action_type (Gxr.ActionType type);
		public virtual void set_digital_from_float_haptic (Gxr.Action haptic_action);
		public virtual void set_digital_from_float_threshold (float threshold);
		public void set_url (owned string url);
		public static bool sets_attach_bindings (Gxr.ActionSet sets, Gxr.Context context, uint32 count);
		public static bool sets_poll (Gxr.ActionSet sets, uint32 count);
		public virtual bool trigger_haptic (float start_seconds_from_now, float duration_seconds, float frequency, float amplitude, uint64 controller_handle);
		public signal void analog_event (Gdk.Event object);
		public signal void digital_event (Gdk.Event object);
		public signal void pose_event (Gdk.Event object);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_action_set_get_type ()")]
	public class ActionSet : GLib.Object {
		[CCode (has_construct_function = false)]
		protected ActionSet ();
		[NoWrapper]
		public virtual bool attach_bindings (Gxr.Context context, uint32 count);
		public bool connect (Gxr.Context context, Gxr.ActionType type, string url, [CCode (scope = "async")] GLib.Callback callback);
		public Gxr.Action connect_digital_from_float (Gxr.Context context, string url, float threshold, string haptic_url, [CCode (scope = "async")] GLib.Callback callback);
		[CCode (has_construct_function = false)]
		public ActionSet.from_url (Gxr.Context context, string url);
		public unowned GLib.SList<Gxr.Action> get_actions ();
		[NoWrapper]
		public virtual bool update (uint32 count);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_backend_get_type ()")]
	public class Backend : GLib.Object {
		[CCode (has_construct_function = false)]
		protected Backend ();
		public static void shutdown ();
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_context_get_type ()")]
	public class Context : GLib.Object {
		[CCode (has_construct_function = false)]
		public Context (Gxr.AppType type, string app_name, uint32 app_version);
		public virtual void acknowledge_quit ();
		[NoWrapper]
		public virtual bool begin_frame (Gxr.Pose poses);
		public virtual bool device_is_controller (uint32 i);
		public virtual bool end_frame ();
		[CCode (has_construct_function = false)]
		public Context.from_api (Gxr.AppType type, Gxr.Api backend, string app_name, uint32 app_version);
		[CCode (has_construct_function = false)]
		public Context.from_vulkan_extensions (Gxr.AppType type, GLib.SList<string> instance_ext_list, GLib.SList<string> device_ext_list, string app_name, uint32 app_version);
		[CCode (has_construct_function = false)]
		public Context.full (Gxr.AppType type, Gxr.Api api, GLib.SList<string> instance_ext_list, GLib.SList<string> device_ext_list, string app_name, uint32 app_version);
		public virtual unowned Gulkan.FrameBuffer get_acquired_framebuffer (uint32 view);
		public Gxr.Api get_api ();
		public virtual bool get_device_extensions (Gulkan.Client gc, out GLib.SList<string> out_list);
		public void* get_device_manager ();
		public virtual string get_device_model_name (uint32 i);
		public virtual void get_frustum_angles (Gxr.Eye eye, out float left, out float right, out float top, out float bottom);
		public unowned Gulkan.Client get_gulkan ();
		public virtual bool get_head_pose (Graphene.Matrix pose);
		public virtual bool get_instance_extensions (out GLib.SList<string> out_list);
		public virtual GLib.SList<string> get_model_list ();
		public virtual uint32 get_model_normal_offset ();
		public virtual uint32 get_model_uv_offset ();
		public virtual uint32 get_model_vertex_stride ();
		public virtual void get_projection (Gxr.Eye eye, float near, float far, Graphene.Matrix mat);
		public virtual void get_view (Gxr.Eye eye, Graphene.Matrix mat);
		public virtual uint32 get_view_count ();
		[CCode (has_construct_function = false)]
		public Context.headless (string app_name, uint32 app_version);
		[CCode (has_construct_function = false)]
		public Context.headless_from_api (Gxr.Api api, string app_name, uint32 app_version);
		[NoWrapper]
		public virtual bool init_runtime (Gxr.AppType type, string app_name, uint32 app_version);
		[NoWrapper]
		public virtual bool init_session ();
		public virtual bool is_another_scene_running ();
		public virtual bool is_input_available ();
		public virtual bool is_tracked_device_connected (uint32 i);
		public virtual bool load_action_manifest (string cache_name, string resource_path, string manifest_name);
		public virtual void poll_event ();
		public virtual void request_quit ();
		public virtual void set_keyboard_transform (Graphene.Matrix transform);
		public virtual void show_keyboard ();
		public virtual bool submit_framebuffers ();
		public signal void action_set_update_event ();
		public signal void binding_loaded_event ();
		public signal void bindings_update_event ();
		public signal void device_update_event (void* object);
		public signal void keyboard_close_event ();
		public signal void keyboard_press_event (void* object);
		public signal void quit_event (void* object);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_controller_get_type ()")]
	public class Controller : Gxr.Device {
		[CCode (has_construct_function = false)]
		public Controller (uint64 controller_handle, Gxr.Context context, string model_name);
		public void drag_start (void* grabbed_object, Graphene.Matrix object_pose);
		public float get_distance (Graphene.Point3D point);
		public bool get_drag_pose (Graphene.Matrix drag_pose);
		public unowned Gxr.GrabState? get_grab_state ();
		public void get_hand_grip_pose (Graphene.Matrix pose);
		public unowned Gxr.HoverState? get_hover_state ();
		public unowned Gxr.Pointer get_pointer ();
		public bool get_pointer_pose (Graphene.Matrix pose);
		public unowned Gxr.PointerTip get_pointer_tip ();
		public void* get_user_data ();
		public void hide_pointer ();
		public bool is_pointer_pose_valid ();
		public bool is_pointer_visible ();
		public void reset_grab_state ();
		public void reset_hover_state ();
		public void set_pointer (owned Gxr.Pointer pointer);
		public void set_pointer_tip (owned Gxr.PointerTip tip);
		public void set_user_data (void* data);
		public void show_pointer ();
		public void update_hand_grip_pose (Graphene.Matrix pose, bool valid);
		public void update_hovered_object (void* last_object, void* object, Graphene.Matrix object_pose, Graphene.Point3D intersection_point, Graphene.Point intersection_2d, float intersection_distance);
		public void update_pointer_pose (Graphene.Matrix pose, bool valid);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_device_get_type ()")]
	public class Device : GLib.Object {
		[CCode (has_construct_function = false)]
		public Device (uint64 device_id, string model_name);
		public uint64 get_handle ();
		public void* get_model ();
		public string get_model_name ();
		public void get_transformation_direct (Graphene.Matrix mat);
		public bool initialize ();
		public bool is_controller ();
		public bool is_pose_valid ();
		public void set_handle (uint64 handle);
		public void set_is_pose_valid (bool valid);
		public void set_model (void* model);
		public void set_model_name (string model_name);
		public void set_transformation_direct (Graphene.Matrix mat);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_device_manager_get_type ()")]
	public class DeviceManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public DeviceManager ();
		public bool add (void* context, uint64 device_id, bool is_controller);
		public void connect_pose_actions (void* context, Gxr.ActionSet action_set, string pointer_pose_url, string hand_grip_pose_url);
		public unowned Gxr.Device @get (uint64 device_id);
		public unowned GLib.SList<Gxr.Device> get_controllers ();
		public unowned GLib.List<Gxr.Device> get_devices ();
		public void remove (uint64 device_id);
		public void update_poses (Gxr.Pose poses);
		public signal void device_activate_event (void* object);
		public signal void device_deactivate_event (void* object);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_manifest_get_type ()")]
	public class Manifest : GLib.Object {
		[CCode (has_construct_function = false)]
		public Manifest ();
		public unowned GLib.SList<string> get_binding_filenames ();
		public unowned GLib.SList<Gxr.BindingManifest?> get_binding_manifests ();
		public bool load_actions (GLib.InputStream action_stream);
		public bool load_bindings (string resource_path);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_id = "gxr_overlay_get_type ()")]
	public class Overlay : GLib.Object {
		[CCode (has_construct_function = false)]
		public Overlay (Gxr.Context context, string key);
		public virtual bool clear_texture ();
		public virtual bool enable_mouse_input ();
		public virtual bool get_color (Graphene.Vec3 color);
		public unowned Gxr.Context get_context ();
		public bool get_flip_y ();
		public bool get_size_meters (Graphene.Vec2 size);
		public virtual bool get_transform_absolute (Graphene.Matrix mat);
		public virtual bool get_width_meters (float width);
		public virtual bool is_visible ();
		public virtual void poll_event ();
		public virtual bool print_info ();
		public virtual bool set_alpha (float alpha);
		public bool set_cairo_surface_raw (Cairo.Surface surface);
		public virtual bool set_color (Graphene.Vec3 color);
		public virtual void set_flip_y (bool flip_y);
		public bool set_gdk_pixbuf_raw (Gdk.Pixbuf pixbuf);
		public virtual void set_keyboard_position (Graphene.Vec2 top_left, Graphene.Vec2 bottom_right);
		public virtual bool set_mouse_scale (float width, float height);
		public virtual bool set_raw (uint8 pixels, uint32 width, uint32 height, uint32 depth);
		public virtual bool set_sort_order (uint32 sort_order);
		public virtual bool set_transform_absolute (Graphene.Matrix mat);
		public bool set_translation (Graphene.Point3D translation);
		public bool set_visibility (bool visibility);
		public virtual bool set_width_meters (float meters);
		public virtual bool show_keyboard ();
		[NoWrapper]
		public virtual bool submit_texture (Gulkan.Client client, Gulkan.Texture texture);
		public virtual bool thumbnail_is_visible ();
		[CCode (has_construct_function = false)]
		public Overlay.width (Gxr.Context context, string key, float meters);
		public signal void button_press_event (Gdk.Event object);
		public signal void button_release_event (Gdk.Event object);
		public signal void destroy ();
		[HasEmitter]
		public virtual signal void hide ();
		public signal void keyboard_close_event ();
		public signal void keyboard_press_event (Gdk.Event object);
		public signal void motion_notify_event (Gdk.Event object);
		[HasEmitter]
		public virtual signal void show ();
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_cname = "GxrModelInterface", type_id = "gxr_model_get_type ()")]
	public interface Model : GLib.Object {
		public abstract string get_name ();
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_cname = "GxrPointerInterface", type_id = "gxr_pointer_get_type ()")]
	public interface Pointer : GLib.Object {
		public abstract unowned Gxr.PointerData? get_data ();
		public float get_default_length ();
		public bool get_plane_intersection (Graphene.Plane plane, Graphene.Matrix plane_transform, float plane_aspect, float distance, Graphene.Vec3 res);
		public void get_ray (Graphene.Ray res);
		public abstract void get_transformation (Graphene.Matrix matrix);
		public abstract void hide ();
		public void init ();
		public bool is_visible ();
		public abstract void move (Graphene.Matrix transform);
		public void reset_length ();
		public abstract void set_length (float length);
		[NoWrapper]
		public abstract void set_selected_object (void* object);
		public abstract void set_transformation (Graphene.Matrix matrix);
		public abstract void show ();
		public void update_render_ray (bool render_ray);
	}
	[CCode (cheader_filename = "gxr/gxr.h", type_cname = "GxrPointerTipInterface", type_id = "gxr_pointer_tip_get_type ()")]
	public interface PointerTip : GLib.Object {
		public void animate_pulse ();
		public abstract unowned Gxr.PointerTipData? get_data ();
		public abstract unowned Gulkan.Client get_gulkan_client ();
		public abstract unowned Gulkan.Texture get_texture ();
		public abstract void get_transformation (Graphene.Matrix matrix);
		public abstract void hide ();
		public void init_settings (Gxr.PointerTipData data);
		public abstract bool is_visible ();
		public Gdk.Pixbuf? render (float progress);
		public void set_active (bool active);
		public abstract void set_and_submit_texture (Gulkan.Texture texture);
		public abstract void set_transformation (Graphene.Matrix matrix);
		public abstract void set_width_meters (float meters);
		public abstract void show ();
		public abstract void submit_texture ();
		public void update (Gxr.Context context, Graphene.Matrix pose, Graphene.Point3D intersection_point);
		public void update_apparent_size (Gxr.Context context);
		public void update_color (bool active_color, Graphene.Point3D color);
		public void update_keep_apparent_size (bool keep_apparent_size);
		public void update_pulse_alpha (double alpha);
		public void update_texture_resolution (int width, int height);
		public void update_width_meters (float width);
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct ActionManifestEntry {
		public weak string name;
		public Gxr.BindingType type;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct AnalogEvent {
		public bool active;
		public weak Graphene.Vec3 state;
		public weak Graphene.Vec3 delta;
		public weak Gxr.Controller controller;
		public float time;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct Binding {
		public Gxr.ActionManifestEntry action;
		public weak GLib.SList<void*> input_paths;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct BindingManifest {
		public weak string filename;
		public weak GLib.SList<void*> gxr_bindings;
		public weak string interaction_profile;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct BindingPath {
		public Gxr.BindingComponent component;
		public weak string path;
		public Gxr.BindingMode mode;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct DigitalEvent {
		public bool active;
		public bool state;
		public bool changed;
		public weak Gxr.Controller controller;
		public float time;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct GrabState {
		public void* grabbed_object;
		public weak Graphene.Quaternion object_rotation;
		public weak Graphene.Quaternion inverse_controller_rotation;
		public weak Graphene.Point grab_offset;
		public Gxr.TransformLock transform_lock;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct HoverState {
		public void* hovered_object;
		public float distance;
		public weak Graphene.Point intersection_2d;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct PointerData {
		public float start_offset;
		public float length;
		public float default_length;
		public bool visible;
		public bool render_ray;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct PointerTipAnimation {
		public weak Gxr.PointerTip tip;
		public float progress;
		public uint callback_id;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct PointerTipData {
		public weak Gxr.PointerTip tip;
		public bool active;
		public Gxr.PointerTipSettings settings;
		public Gxr.PointerTipAnimation animation;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct PointerTipSettings {
		public bool keep_apparent_size;
		public float width_meters;
		public weak Graphene.Point3D active_color;
		public weak Graphene.Point3D passive_color;
		public double pulse_alpha;
		public int texture_width;
		public int texture_height;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct Pose {
		public weak Graphene.Matrix transformation;
		public bool is_valid;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct PoseEvent {
		public bool active;
		public weak Graphene.Matrix pose;
		public weak Graphene.Vec3 velocity;
		public weak Graphene.Vec3 angular_velocity;
		public bool valid;
		public bool device_connected;
		public weak Gxr.Controller controller;
	}
	[CCode (cheader_filename = "gxr/gxr.h", has_type_id = false)]
	public struct QuitEvent {
		public Gxr.QuitReason reason;
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_ACTION_", has_type_id = false)]
	public enum ActionType {
		DIGITAL,
		DIGITAL_FROM_FLOAT,
		VEC2F,
		FLOAT,
		POSE,
		HAPTIC
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_API_", has_type_id = false)]
	public enum Api {
		OPENVR,
		OPENXR,
		NONE
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_APP_", has_type_id = false)]
	public enum AppType {
		SCENE,
		OVERLAY,
		HEADLESS
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_BINDING_COMPONENT_", has_type_id = false)]
	public enum BindingComponent {
		NONE,
		UNKNOWN,
		CLICK,
		PULL,
		POSITION,
		TOUCH,
		FORCE
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_BINDING_MODE_", has_type_id = false)]
	public enum BindingMode {
		NONE,
		UNKNOWN,
		BUTTON,
		TRACKPAD,
		ANALOG_STICK
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_BINDING_TYPE_", has_type_id = false)]
	public enum BindingType {
		UNKNOWN,
		POSE,
		BOOLEAN,
		FLOAT,
		VEC2,
		HAPTIC
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_EYE_", has_type_id = false)]
	public enum Eye {
		LEFT,
		RIGHT
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_QUIT_", has_type_id = false)]
	public enum QuitReason {
		SHUTDOWN,
		APPLICATION_TRANSITION,
		PROCESS_QUIT
	}
	[CCode (cheader_filename = "gxr/gxr.h", cprefix = "GXR_TRANSFORM_LOCK_", has_type_id = false)]
	public enum TransformLock {
		NONE,
		PUSH_PULL,
		SCALE
	}
	[CCode (cheader_filename = "gxr/gxr.h", cname = "GXR_DEVICE_INDEX_HMD")]
	public const int DEVICE_INDEX_HMD;
	[CCode (cheader_filename = "gxr/gxr.h", cname = "GXR_DEVICE_INDEX_MAX")]
	public const int DEVICE_INDEX_MAX;
	[CCode (cheader_filename = "gxr/gxr.h", cname = "GXR_MODEL_NAME_MAX")]
	public const int MODEL_NAME_MAX;
	[CCode (cheader_filename = "gxr/gxr.h", cname = "GXR_TIP_APPARENT_SIZE_DISTANCE")]
	public const double TIP_APPARENT_SIZE_DISTANCE;
	[CCode (cheader_filename = "gxr/gxr.h", cname = "GXR_TIP_VIEWPORT_SCALE")]
	public const int TIP_VIEWPORT_SCALE;
	[CCode (cheader_filename = "gxr/gxr.h")]
	public static bool io_create_directory_if_needed (string path);
	[CCode (cheader_filename = "gxr/gxr.h")]
	public static GLib.StringBuilder io_get_cache_path (string dir_name);
	[CCode (cheader_filename = "gxr/gxr.h")]
	public static bool io_write_resource_to_file (string res_base_path, string cache_path, string file_name, GLib.StringBuilder file_path);
	[CCode (cheader_filename = "gxr/gxr.h")]
	public static uint32 time_age_secs_to_monotonic_msecs (float age);
}
