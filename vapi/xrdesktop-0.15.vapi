/* xrdesktop-0.15.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Xrd", gir_namespace = "Xrd", gir_version = "0.15", lower_case_cprefix = "xrd_")]
namespace Xrd {
	namespace Math {
		[CCode (cheader_filename = "xrd.h")]
		public static bool clamp_towards_zero_2d (Graphene.Point min, Graphene.Point max, Graphene.Point point, Graphene.Point clamped);
		[CCode (cheader_filename = "xrd.h")]
		public static void get_rotation_angles (Graphene.Vec3 direction, float azimuth, float inclination);
		[CCode (cheader_filename = "xrd.h")]
		public static bool intersect_lines_2d (Graphene.Point p0, Graphene.Point p1, Graphene.Point p2, Graphene.Point p3, Graphene.Point intersection);
		[CCode (cheader_filename = "xrd.h")]
		public static void matrix_set_translation_point (Graphene.Matrix matrix, Graphene.Point3D point);
		[CCode (cheader_filename = "xrd.h")]
		public static void matrix_set_translation_vec (Graphene.Matrix matrix, Graphene.Vec3 vec);
		[CCode (cheader_filename = "xrd.h")]
		public static float point_matrix_distance (Graphene.Point3D intersection_point, Graphene.Matrix pose);
		[CCode (cheader_filename = "xrd.h")]
		public static void sphere_to_3d_coords (float azimuth, float inclination, float distance, Graphene.Point3D point);
	}
	namespace Render {
		[CCode (cheader_filename = "xrd.h")]
		public static void @lock ();
		[CCode (cheader_filename = "xrd.h")]
		public static void lock_destroy ();
		[CCode (cheader_filename = "xrd.h")]
		public static void lock_init ();
		[CCode (cheader_filename = "xrd.h")]
		public static void @unlock ();
	}
	namespace Settings {
		[CCode (cheader_filename = "xrd.h")]
		public static void connect_and_apply ([CCode (delegate_target_pos = 2.1, scope = "async")] GLib.Callback callback, string key);
		[CCode (cheader_filename = "xrd.h")]
		public static void destroy_instance ();
		[CCode (cheader_filename = "xrd.h")]
		public static unowned GLib.Settings get_instance ();
		[CCode (cheader_filename = "xrd.h")]
		public static bool is_schema_installed ();
		[CCode (cheader_filename = "xrd.h")]
		public static void update_double_val (GLib.Settings settings, string key, out double val);
		[CCode (cheader_filename = "xrd.h")]
		public static void update_gboolean_val (GLib.Settings settings, string key, out bool val);
		[CCode (cheader_filename = "xrd.h")]
		public static void update_int_val (GLib.Settings settings, string key, out int val);
	}
	[CCode (cheader_filename = "xrd.h", type_id = "xrd_client_get_type ()")]
	public class Client : GLib.Object {
		[CCode (has_construct_function = false)]
		public Client ();
		[NoWrapper]
		public virtual bool add_button (Xrd.Window button, int label_count, string label, Graphene.Point3D position, GLib.Callback press_callback);
		public void add_container (Xrd.Container container);
		public void add_window (Xrd.Window window, bool draggable, void* lookup_key);
		public Xrd.Window? button_new_from_icon (float width, float height, float ppm, string url);
		public Xrd.Window? button_new_from_text (float width, float height, float ppm, [CCode (array_length_cname = "label_count", array_length_pos = 3.5)] string[] label);
		public unowned GLib.SList<Gxr.Controller> get_controllers ();
		public unowned Xrd.DesktopCursor get_desktop_cursor ();
		public virtual unowned Gulkan.Client get_gulkan ();
		public unowned Gxr.Context get_gxr_context ();
		public unowned Xrd.InputSynth get_input_synth ();
		public unowned Xrd.Window? get_keyboard_window ();
		public unowned Xrd.WindowManager get_manager ();
		public unowned Xrd.Window? get_synth_hovered ();
		public VK.ImageLayout get_upload_layout ();
		public unowned GLib.SList<Xrd.Window> get_windows ();
		[NoWrapper]
		public virtual void init_controller (Gxr.Controller controller);
		public unowned Xrd.Window? lookup_window (void* key);
		public bool poll_input_events ();
		public bool poll_runtime_events ();
		public void remove_container (Xrd.Container container);
		public void remove_window (Xrd.Window window);
		public void set_pin (Xrd.Window win, bool pin);
		public void show_pinned_only (bool pinned_only);
		public void* switch_mode ();
		[NoWrapper]
		public virtual unowned Xrd.Window window_new_from_data (Xrd.WindowData data);
		[NoWrapper]
		public virtual unowned Xrd.Window window_new_from_meters (string title, float width, float height, float ppm);
		[NoWrapper]
		public virtual unowned Xrd.Window window_new_from_native (string title, void* native, uint32 width_pixels, uint32 height_pixels, float ppm);
		[NoWrapper]
		public virtual unowned Xrd.Window window_new_from_pixels (string title, uint32 width, uint32 height, float ppm);
		[CCode (has_construct_function = false)]
		public Client.with_mode (Xrd.ClientMode mode);
		public signal void click_event (Gdk.Event object);
		public signal void keyboard_press_event (Gdk.Event object);
		public signal void move_cursor_event (Xrd.MoveCursorEvent event);
		public signal void request_quit_event (Gxr.QuitEvent event);
	}
	[CCode (cheader_filename = "xrd.h", type_id = "xrd_container_get_type ()")]
	public class Container : GLib.Object {
		[CCode (has_construct_function = false)]
		public Container ();
		public void add_window (Xrd.Window window, Graphene.Matrix relative_transform);
		public void center_view (Gxr.Context context, float distance);
		public float get_distance ();
		public GLib.SList<weak Xrd.Window> get_windows ();
		public void hide ();
		public bool is_visible ();
		public void remove_window (Xrd.Window window);
		public void set_attachment (Xrd.ContainerAttachment attachment, Gxr.Controller controller);
		public void set_distance (float distance);
		public void set_layout (Xrd.ContainerLayout layout);
		public void show ();
		public bool step (Gxr.Context context);
	}
	[CCode (cheader_filename = "xrd.h", type_id = "xrd_input_synth_get_type ()")]
	public class InputSynth : GLib.Object {
		[CCode (has_construct_function = false)]
		public InputSynth ();
		public Gxr.ActionSet create_action_set (Gxr.Context context);
		public unowned Gxr.Controller get_primary_controller ();
		public void make_primary (Gxr.Controller controller);
		public void move_cursor (Xrd.Window window, Graphene.Matrix controller_pose, Graphene.Point3D intersection);
		public void reset_press_state ();
		public void reset_scroll ();
		public signal void click_event (Gdk.Event object);
		public signal void move_cursor_event (Gdk.Event object);
	}
	[CCode (cheader_filename = "xrd.h", type_id = "xrd_shake_compensator_get_type ()")]
	public class ShakeCompensator : GLib.Object {
		[CCode (has_construct_function = false)]
		public ShakeCompensator ();
		public Xrd.InputSynthButton get_button ();
		public bool is_drag (Xrd.Window window, Graphene.Matrix controller_pose, Graphene.Point3D intersection);
		public bool is_recording ();
		public void record (Graphene.Point position);
		public void replay_move_queue (Xrd.InputSynth synth, uint move_cursor_event_signal, Xrd.Window hover_window);
		public void reset ();
		public void start_recording (Xrd.InputSynthButton button);
	}
	[CCode (cheader_filename = "xrd.h", type_id = "xrd_window_manager_get_type ()")]
	public class WindowManager : GLib.Object {
		[CCode (has_construct_function = false)]
		public WindowManager ();
		public void add_container (Xrd.Container container);
		public void add_window (Xrd.Window window, Xrd.WindowFlags flags);
		public void arrange_reset ();
		public bool arrange_sphere (Gxr.Context context);
		public void check_grab (Gxr.Controller controller);
		public void check_release (Gxr.Controller controller);
		public void drag_start (Gxr.Controller controller);
		public unowned GLib.SList<Xrd.Window> get_buttons ();
		public Xrd.HoverMode get_hover_mode ();
		public unowned GLib.SList<Xrd.Window> get_windows ();
		public void poll_window_events (Gxr.Context context);
		public void remove_container (Xrd.Container container);
		public void remove_window (Xrd.Window window);
		public void scale (Gxr.GrabState grab_state, float factor, float update_rate_ms);
		public void set_hover_mode (Xrd.HoverMode mode);
		public void update_controller (Gxr.Controller controller);
		public signal void no_hover_event (Gdk.Event object);
	}
	[CCode (cheader_filename = "xrd.h", type_cname = "XrdDesktopCursorInterface", type_id = "xrd_desktop_cursor_get_type ()")]
	public interface DesktopCursor : GLib.Object {
		public abstract unowned Xrd.DesktopCursorData? get_data ();
		public abstract unowned Gulkan.Texture get_texture ();
		public abstract void get_transformation (Graphene.Matrix matrix);
		public abstract void hide ();
		public void init_settings ();
		public abstract void set_and_submit_texture (Gulkan.Texture texture);
		public void set_hotspot (int hotspot_x, int hotspot_y);
		public abstract void set_transformation (Graphene.Matrix matrix);
		public abstract void set_width_meters (float meters);
		public abstract void show ();
		public abstract void submit_texture ();
		public void update (Gxr.Context context, Xrd.Window window, Graphene.Point3D intersection);
	}
	[CCode (cheader_filename = "xrd.h", type_cname = "XrdWindowInterface", type_id = "xrd_window_get_type ()")]
	public interface Window : GLib.Object {
		public abstract void add_child (Xrd.Window child, Graphene.Point offset_center);
		public void close ();
		public void deselect ();
		public abstract void emit_grab (Xrd.GrabEvent event);
		public abstract void emit_grab_start (Gxr.Controller controller);
		public abstract void emit_hover (Xrd.HoverEvent event);
		public abstract void emit_hover_end (Gxr.Controller controller);
		public abstract void emit_hover_start (Gxr.Controller controller);
		public abstract void emit_release (Gxr.Controller controller);
		public void end_selection ();
		public float get_aspect_ratio ();
		public float get_current_height_meters ();
		public float get_current_ppm ();
		public float get_current_width_meters ();
		public abstract unowned Xrd.WindowData? get_data ();
		public float get_initial_ppm ();
		public void get_intersection_2d (Graphene.Point3D intersection_3d, Graphene.Point intersection_2d);
		public void get_intersection_2d_pixels (Graphene.Point3D intersection_3d, Graphene.Point intersection_pixels);
		public void get_normal (Graphene.Vec3 normal);
		public void get_plane (Graphene.Plane res);
		public void get_reset_transformation (Graphene.Matrix transform);
		public abstract unowned Gulkan.Texture? get_texture ();
		public abstract bool get_transformation (Graphene.Matrix mat);
		public abstract bool get_transformation_no_scale (Graphene.Matrix mat);
		public abstract void hide ();
		public bool is_pinned ();
		public bool is_selected ();
		public abstract bool is_visible ();
		public static Xrd.Window new_from_data (Xrd.Client self, Xrd.WindowData data);
		public static Xrd.Window new_from_meters (Xrd.Client client, string title, float width, float height, float ppm);
		public static Xrd.Window new_from_native (Xrd.Client client, string title, void* native, uint32 width_pixels, uint32 height_pixels, float ppm);
		public static Xrd.Window new_from_pixels (Xrd.Client client, string title, uint32 width, uint32 height, float ppm);
		public abstract void poll_event ();
		public void save_reset_transformation ();
		public void select ();
		public abstract void set_and_submit_texture (owned Gulkan.Texture texture);
		public abstract void set_color (Graphene.Vec3 color);
		public abstract void set_flip_y (bool flip_y);
		public void set_pin (bool pinned, bool hide_unpinned);
		public void set_reset_transformation (Graphene.Matrix transform);
		public abstract bool set_transformation (Graphene.Matrix mat);
		public abstract void submit_texture ();
		public void update_child ();
		[NoAccessorMethod]
		public abstract float initial_height_meters { get; set construct; }
		[NoAccessorMethod]
		public abstract float initial_width_meters { get; set construct; }
		[NoAccessorMethod]
		public abstract void* native { get; set construct; }
		[NoAccessorMethod]
		public abstract float scale { get; set construct; }
		[NoAccessorMethod]
		public abstract uint texture_height { get; set construct; }
		[NoAccessorMethod]
		public abstract uint texture_width { get; set construct; }
		[NoAccessorMethod]
		public abstract string title { owned get; construct; }
		public signal void button_press_event (Gdk.Event object);
		public signal void button_release_event (Gdk.Event object);
		public signal void destroy ();
		public signal void grab_event (Gdk.Event object);
		public signal void grab_start_event (Gdk.Event object);
		public signal void hover_end_event (Gdk.Event object);
		public signal void hover_event (Gdk.Event object);
		public signal void hover_start_event (Gdk.Event object);
		public signal void keyboard_close_event ();
		public signal void keyboard_press_event (Gdk.Event object);
		public signal void motion_notify_event (Gdk.Event object);
		public signal void release_event (Gdk.Event object);
		public signal void scroll_event (Gdk.Event object);
		[HasEmitter]
		public virtual signal void show ();
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct ClickEvent {
		public weak Xrd.Window window;
		public weak Graphene.Point position;
		public Xrd.InputSynthButton button;
		public bool state;
		public weak Gxr.Controller controller;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct DesktopCursorData {
		public weak Xrd.DesktopCursor cursor;
		public weak Gxr.Context context;
		public bool keep_apparent_size;
		public float width_meters;
		public float cached_width_meters;
		public int hotspot_x;
		public int hotspot_y;
		public uint32 texture_width;
		public uint32 texture_height;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct GrabEvent {
		public weak Graphene.Matrix pose;
		public weak Gxr.Controller controller;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct HoverEvent {
		public weak Graphene.Point3D point;
		public weak Graphene.Matrix pose;
		public float distance;
		public weak Gxr.Controller controller;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct MoveCursorEvent {
		public weak Xrd.Window window;
		public weak Graphene.Point position;
		public bool ignore;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct NoHoverEvent {
		public weak Gxr.Controller controller;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct TransformTransition {
		public weak Xrd.Window window;
		public weak Graphene.Matrix from;
		public weak Graphene.Matrix to;
		public float from_scaling;
		public float to_scaling;
		public float interpolate;
		public int64 last_timestamp;
	}
	[CCode (cheader_filename = "xrd.h", has_type_id = false)]
	public struct WindowData {
		public void* native;
		public uint32 texture_width;
		public uint32 texture_height;
		public weak GLib.StringBuilder title;
		public weak Graphene.Point initial_size_meters;
		public float scale;
		public weak Graphene.Matrix transform;
		public weak Xrd.Window? child_window;
		public weak Xrd.Window? parent_window;
		public weak Graphene.Point child_offset_center;
		public weak Graphene.Matrix reset_transform;
		public bool pinned;
		public weak Gulkan.Texture texture;
		public weak Xrd.Window xrd_window;
		public bool owned_by_window;
	}
	[CCode (cheader_filename = "xrd.h", cprefix = "XRD_CLIENT_MODE_", has_type_id = false)]
	public enum ClientMode {
		OVERLAY,
		SCENE
	}
	[CCode (cheader_filename = "xrd.h", cprefix = "XRD_CONTAINER_ATTACHMENT_", has_type_id = false)]
	public enum ContainerAttachment {
		NONE,
		HEAD,
		HAND
	}
	[CCode (cheader_filename = "xrd.h", cprefix = "XRD_CONTAINER_", has_type_id = false)]
	public enum ContainerLayout {
		NO_LAYOUT,
		HORIZONTAL,
		VERTICAL,
		RELATIVE
	}
	[CCode (cheader_filename = "xrd.h", cprefix = "XRD_HOVER_MODE_", has_type_id = false)]
	public enum HoverMode {
		EVERYTHING,
		BUTTONS
	}
	[CCode (cheader_filename = "xrd.h", cprefix = "", has_type_id = false)]
	public enum InputSynthButton {
		[CCode (cname = "LEFT_BUTTON")]
		EFT_BUTTON,
		[CCode (cname = "MIDDLE_BUTTON")]
		IDDLE_BUTTON,
		[CCode (cname = "RIGHT_BUTTON")]
		IGHT_BUTTON,
		[CCode (cname = "SCROLL_UP")]
		CROLL_UP,
		[CCode (cname = "SCROLL_DOWN")]
		CROLL_DOWN,
		[CCode (cname = "SCROLL_LEFT")]
		CROLL_LEFT,
		[CCode (cname = "SCROLL_RIGHT")]
		CROLL_RIGHT
	}
	[CCode (cheader_filename = "xrd.h", cprefix = "XRD_WINDOW_", has_type_id = false)]
	[Flags]
	public enum WindowFlags {
		HOVERABLE,
		DRAGGABLE,
		MANAGED,
		DESTROY_WITH_PARENT,
		BUTTON
	}
	[CCode (cheader_filename = "xrd.h", cname = "XRD_TIP_APPARENT_SIZE_DISTANCE")]
	public const double TIP_APPARENT_SIZE_DISTANCE;
	[CCode (cheader_filename = "xrd.h", cname = "XRD_TIP_VIEWPORT_SCALE")]
	public const int TIP_VIEWPORT_SCALE;
	[CCode (cheader_filename = "xrd.h")]
	public static void button_set_icon (Xrd.Window button, Gulkan.Client client, VK.ImageLayout upload_layout, string url);
	[CCode (cheader_filename = "xrd.h")]
	public static void button_set_text (Xrd.Window button, Gulkan.Client client, VK.ImageLayout upload_layout, int label_count, string label);
}
